import{_ as r,c as o,j as e,a as n,t as i,ag as l,o as s}from"./chunks/framework.BkxfIEIK.js";const b=JSON.parse('{"title":"字符串和数组","description":"","frontmatter":{"title":"字符串和数组","createTime":"2024-09-18 23:07:48","outline":[2,3],"tags":"数据结构"},"headers":[],"relativePath":"notes/数据结构/字符串和数组.md","filePath":"notes/数据结构/字符串和数组.md","lastUpdated":null}'),d={name:"notes/数据结构/字符串和数组.md"},h={id:"frontmatter-title",tabindex:"-1"};function p(t,a,c,_,m,f){return s(),o("div",null,[e("h1",h,[n(i(t.$frontmatter.title)+" ",1),a[0]||(a[0]=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),a[1]||(a[1]=l('<h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><h3 id="相关概念" tabindex="-1">相关概念 <a class="header-anchor" href="#相关概念" aria-label="Permalink to &quot;相关概念&quot;">​</a></h3><p>数据储存结构：集合、列表、数组</p><h3 id="集合" tabindex="-1">集合 <a class="header-anchor" href="#集合" aria-label="Permalink to &quot;集合&quot;">​</a></h3><p>特点：无序，元素唯一，有并集、差集、交集等运算方式</p><h3 id="列表-又称线性列表" tabindex="-1">列表，又称线性列表 <a class="header-anchor" href="#列表-又称线性列表" aria-label="Permalink to &quot;列表，又称线性列表&quot;">​</a></h3><p>特点： 有序、可变的元素集合，元素可重复 表现形式： 数组、链表、栈和队列</p><p>例如：javascript中的列表</p><h3 id="数组-列表的实现方式之一" tabindex="-1">数组，列表的实现方式之一 <a class="header-anchor" href="#数组-列表的实现方式之一" aria-label="Permalink to &quot;数组，列表的实现方式之一&quot;">​</a></h3><p>特点： 有序、大小固定、元素类型一致，根据索引能够快速访问元素</p><p>例外： python中的动态数组，根据编程语言数组这个数据结构的实现方式有所不同。</p><p>与列表的区别： 数组拥有索引，数组的元素在内存在是连续存储的，相比链表，链表的元素在内存中不一定连续。</p><h3 id="数组的操作" tabindex="-1">数组的操作 <a class="header-anchor" href="#数组的操作" aria-label="Permalink to &quot;数组的操作&quot;">​</a></h3><p>读取的时间复杂度为O(1) 查找的时间复杂的为O(n) 插入会产生索引变换 删除的时间复杂度为O(n)</p>',14))])}const q=r(d,[["render",p]]);export{b as __pageData,q as default};
