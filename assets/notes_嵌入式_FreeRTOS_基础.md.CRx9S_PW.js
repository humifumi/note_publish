import{_ as r,c as o,j as t,a as s,t as n,ag as i,o as l}from"./chunks/framework.BkxfIEIK.js";const u=JSON.parse('{"title":"freeRTOS基础","description":"","frontmatter":{"title":"freeRTOS基础","createTime":"2024-09-22 22:22:32","outline":[2,3],"tags":"stm32"},"headers":[],"relativePath":"notes/嵌入式/FreeRTOS/基础.md","filePath":"notes/嵌入式/FreeRTOS/基础.md","lastUpdated":null}'),d={name:"notes/嵌入式/FreeRTOS/基础.md"},p={id:"frontmatter-title",tabindex:"-1"};function c(a,e,_,f,h,m){return l(),o("div",null,[t("h1",p,[s(n(a.$frontmatter.title)+" ",1),e[0]||(e[0]=t("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),e[1]||(e[1]=i('<h2 id="任务调度器" tabindex="-1">任务调度器 <a class="header-anchor" href="#任务调度器" aria-label="Permalink to &quot;任务调度器&quot;">​</a></h2><p>任务调度器，使用相关调度算法来决定当前执行哪个任务。 有三种调度方式，抢占式调度、时间片调度、协程式调度（轮询）</p><p>抢占式调度：针对优先级不同的任务，每个任务都有优先级，优先级高的任务可以抢占低优先级任务的cpu使用权 时间片调度：主要针对相同优先级的任务，当多个任务优先级相同时，任务调度器就会在每个时钟节拍到来时切换任务。 协程式调度：后续不更新。</p><p>时间片：在freeRTOS中，一个时间片等于一个SysTick中断周期。</p><h2 id="任务状态" tabindex="-1">任务状态 <a class="header-anchor" href="#任务状态" aria-label="Permalink to &quot;任务状态&quot;">​</a></h2><p>在freeRTOS中存在四种状态：就绪态、运行态、阻塞态、挂起态。</p><p>运行态： 正在执行的任务 就绪态： 任务能够执行，但因为当前优先级不够或者时间片没有轮转到这个任务时处于就绪态 阻塞态： 任务因为延时或者等待外部事件发生就会进入阻塞态 挂起态： 调用了vTaskSuspend进入挂起态，需要使用解挂函数vTaskResume()才能进入就绪态。</p><h2 id="任务状态列表" tabindex="-1">任务状态列表 <a class="header-anchor" href="#任务状态列表" aria-label="Permalink to &quot;任务状态列表&quot;">​</a></h2><p>就绪列表：pxReadyTaskList[] 阻塞列表： 挂起列表：</p>',9))])}const S=r(d,[["render",c]]);export{u as __pageData,S as default};
