import{_ as e,c as r,ag as t,o as n}from"./chunks/framework.BkxfIEIK.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"archived/正常人谁写日记啊/九月/2024年9月29日.md","filePath":"archived/正常人谁写日记啊/九月/2024年9月29日.md","lastUpdated":null}'),o={name:"archived/正常人谁写日记啊/九月/2024年9月29日.md"};function h(i,a,l,d,c,p){return n(),r("div",null,a[0]||(a[0]=[t(`<h2 id="连接-connection" tabindex="-1">连接 connection <a class="header-anchor" href="#连接-connection" aria-label="Permalink to &quot;连接 connection&quot;">​</a></h2><h3 id="客户端" tabindex="-1">客户端 <a class="header-anchor" href="#客户端" aria-label="Permalink to &quot;客户端&quot;">​</a></h3><p>标识 源IP,端口 数据列表 通道列表</p><h3 id="服务端" tabindex="-1">服务端 <a class="header-anchor" href="#服务端" aria-label="Permalink to &quot;服务端&quot;">​</a></h3><p>标识 目的IP,端口 数据列表 通道列表</p><h2 id="通道-channel" tabindex="-1">通道 channel: <a class="header-anchor" href="#通道-channel" aria-label="Permalink to &quot;通道 channel:&quot;">​</a></h2><p>连接 标识 状态 流量统计 存活时间 可用性 重传 模式：</p><h2 id="数据帧-frame" tabindex="-1">数据帧 frame： <a class="header-anchor" href="#数据帧-frame" aria-label="Permalink to &quot;数据帧 frame：&quot;">​</a></h2><p>标识 序列号 数据</p><h2 id="通道选择器" tabindex="-1">通道选择器： <a class="header-anchor" href="#通道选择器" aria-label="Permalink to &quot;通道选择器：&quot;">​</a></h2><p>提前预留独占通道</p><h2 id="通道协议" tabindex="-1">通道协议： <a class="header-anchor" href="#通道协议" aria-label="Permalink to &quot;通道协议：&quot;">​</a></h2><p>认证 配置 打开(认证完成已打开) 传输(数据帧) 关闭(通道) 续传</p><h3 id="认证" tabindex="-1">认证 <a class="header-anchor" href="#认证" aria-label="Permalink to &quot;认证&quot;">​</a></h3><p>密钥 标识</p><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>存活时间</p><h3 id="通道子协议续传" tabindex="-1">通道子协议续传 <a class="header-anchor" href="#通道子协议续传" aria-label="Permalink to &quot;通道子协议续传&quot;">​</a></h3><h2 id="通道管理方式" tabindex="-1">通道管理方式 <a class="header-anchor" href="#通道管理方式" aria-label="Permalink to &quot;通道管理方式&quot;">​</a></h2><p>通道状态：</p><pre><code>1.建立中
2.空闲
3.占用
4.关闭
5.超时关闭
</code></pre><h3 id="客户端通道" tabindex="-1">客户端通道 <a class="header-anchor" href="#客户端通道" aria-label="Permalink to &quot;客户端通道&quot;">​</a></h3><p>预留通道时，通道处于空闲</p><p>数据从源连接传入时，将数据流分帧，轮询传入通道，通道进入占用状态</p><p>数据从服务端传入时，将数据帧组装，传回连接</p><p>客户端主动关闭连接时，发送关闭到服务端，并等待回应。超过10秒无回应主动关闭连接，并设置状态为超时关闭</p><p>收到服务端发起关闭连接，设置状态为关闭，并关闭源连接</p><h3 id="服务端通道" tabindex="-1">服务端通道 <a class="header-anchor" href="#服务端通道" aria-label="Permalink to &quot;服务端通道&quot;">​</a></h3><p>预留通道时，通道处于空闲</p><p>数据从客户端传入时，将数据帧组装，传到目的连接</p><p>数据从目的传入时，将数据流分帧，轮询传入通道，通道进入占用状态</p><p>服务端主动关闭连接时，发送关闭到客户端，并等待回应。超过10秒无回应主动关闭连接，并设置状态为超时关闭</p><p>收到客户端发起的关闭连接，设置状态为关闭，并关闭目标连接</p><h3 id="空闲通道列表" tabindex="-1">空闲通道列表 <a class="header-anchor" href="#空闲通道列表" aria-label="Permalink to &quot;空闲通道列表&quot;">​</a></h3><p>生产者，生产</p><h2 id="流程" tabindex="-1">流程： <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;流程：&quot;">​</a></h2><pre><code>//客户端 
1.数据传入 127.0.0.1:1234
2.数据处理
3.数据传出 -&gt;127.0.0.1:5678

//服务端 
4.数据传入 127.0.0.1:5678
5.数据处理
6.数据传出 -&gt;127.0.0.1:7890
</code></pre><p>3到4之间有多路复用通道。传输数据包</p><h2 id="管理器" tabindex="-1">管理器 <a class="header-anchor" href="#管理器" aria-label="Permalink to &quot;管理器&quot;">​</a></h2><h3 id="连接管理器" tabindex="-1">连接管理器 <a class="header-anchor" href="#连接管理器" aria-label="Permalink to &quot;连接管理器&quot;">​</a></h3><p>等待队列 连接字典</p><ul><li>一条连接可以使用多条通道</li><li>通道可以复用</li><li>通道随时可用</li><li></li></ul><h3 id="通道管理器" tabindex="-1">通道管理器 <a class="header-anchor" href="#通道管理器" aria-label="Permalink to &quot;通道管理器&quot;">​</a></h3><p>空闲列表 占用字典 结束列表</p><h3 id="帧管理器" tabindex="-1">帧管理器 <a class="header-anchor" href="#帧管理器" aria-label="Permalink to &quot;帧管理器&quot;">​</a></h3>`,45)]))}const b=e(o,[["render",h]]);export{u as __pageData,b as default};
