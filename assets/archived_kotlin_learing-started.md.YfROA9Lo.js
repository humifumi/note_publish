import{_ as a,c as s,ag as e,o as t}from"./chunks/framework.BkxfIEIK.js";const k=JSON.parse('{"title":"Basic Concepts","description":"","frontmatter":{},"headers":[],"relativePath":"archived/kotlin/learing-started.md","filePath":"archived/kotlin/learing-started.md","lastUpdated":null}'),n={name:"archived/kotlin/learing-started.md"};function l(r,i,o,h,p,c){return t(),s("div",null,i[0]||(i[0]=[e(`<h1 id="basic-concepts" tabindex="-1">Basic Concepts <a class="header-anchor" href="#basic-concepts" aria-label="Permalink to &quot;Basic Concepts&quot;">​</a></h1><p>Before learning kotlin, I&#39;ve already fimilar with some programming languages such as JAVA. Assume that you have already learned other similar languages such as JAVA before learing Kotlin. In this note, I am simply recording the diffrence between kotlin and other languages.</p><h2 id="type" tabindex="-1">Type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;Type&quot;">​</a></h2><p>In kotlin,everything is an <strong>object</strong> int the sence that you can call member functions and properties on any variable.</p><h3 id="explicit-number-conversions" tabindex="-1">Explicit number conversions <a class="header-anchor" href="#explicit-number-conversions" aria-label="Permalink to &quot;Explicit number conversions&quot;">​</a></h3><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Byte</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // OK, literals are checked statically</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// val i: Int = b // ERROR</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i1: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>All number types support conversions to other types:</p><ul><li>toByte(): Byte</li><li>toShort(): Short</li><li>toInt(): Int</li><li>toLong(): Long</li><li>toFloat(): Float</li><li>toDouble(): Double</li></ul>`,8)]))}const g=a(n,[["render",l]]);export{k as __pageData,g as default};
